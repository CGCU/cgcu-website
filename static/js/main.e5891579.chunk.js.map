{"version":3,"sources":["logo.svg","GridComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","margin","flexDirection","width","container","minHeight","details","content","flex","cover","controls","alignItems","paddingLeft","spacing","paddingBottom","maxWidth","personObj","name","awardType","photo","compare","a","b","length","getItemsArray","arr","awards","presidents","person","tempPersonObj","Object","create","photoFile","push","full","half","sort","GridComponent","useState","myItemsArray","setMyItemsArray","useEffect","items","classes","useTheme","Grid","direction","justify","map","item","Card","className","CardMedia","component","image","CardContent","Typography","variant","value","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5891579.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {Grid, Card, makeStyles, useTheme, CardContent, CardMedia, Typography} from \"@material-ui/core\";\nimport React, {useEffect, useState} from \"react\";\nimport awards from \"./awards.json\"\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        margin: 10,\n        flexDirection: 'column',\n        width: \"350px\"\n\n    },\n\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        minHeight: 200,\n        width: \"350px\"\n    },\n    details: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: \"350px\"\n\n    },\n    content: {\n        flex: 1,\n        width: \"350px\"\n\n    },\n    cover: {\n        flex: 1,\n    },\n    controls: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        maxWidth: 500\n    }\n}));\n\nlet personObj = {\n    name: \"Person name\",\n    awardType: [\"Full Colours\"],\n    photo: \"./download.png\"\n}\n\nfunction compare(a, b) {\n    if (a.name < b.name) {\n        return -1;\n    }\n    if (a.name > b.name) {\n        return 1;\n    }\n    if (a.awardType.length < b.awardType.length) {\n        return -1\n    }\n\n    if (a.awardType.length > b.awardType.length) {\n        return 1\n    }\n    return 0;\n}\n\n\nasync function getItemsArray() {\n    let arr = [];\n    for (const person of awards.presidents) {\n        let tempPersonObj = Object.create(personObj);\n        tempPersonObj.name = person.name;\n        tempPersonObj.awardType = [\"Presidents Award\"];\n        tempPersonObj.photo = person.photoFile;\n        tempPersonObj.awardType = person.awards;\n        arr.push(tempPersonObj)\n    }\n\n    for (const person of awards.full) {\n        let tempPersonObj = Object.create(personObj);\n        tempPersonObj.name = person.name;\n        tempPersonObj.awardType = [\"Full Colours\"];\n        tempPersonObj.photo = person.photoFile;\n\n        arr.push(tempPersonObj)\n    }\n\n    for (const person of awards.half) {\n        let tempPersonObj = Object.create(personObj);\n        tempPersonObj.name = person.name;\n        tempPersonObj.awardType = [\"Half Colours\"];\n        tempPersonObj.photo = person.photoFile;\n\n        arr.push(tempPersonObj)\n    }\n\n    arr.sort(compare);\n    return arr;\n}\n\nfunction GridComponent() {\n    const [myItemsArray, setMyItemsArray] = useState([]);\n    useEffect(() => {\n        (async () => {\n            let items = await getItemsArray();\n            setMyItemsArray(items);\n        })();\n\n    }, [])\n    const classes = useStyles();\n    const theme = useTheme();\n    return (\n\n        <Grid container\n              direction=\"row\"\n              justify=\"space-around\"\n              alignItems=\"flex-start\">\n            {\n                myItemsArray.map(item => (\n                    <Card className={classes.root}>\n                        <div className={classes.container}>\n                            <div className={classes.details}>\n\n                                <CardMedia\n                                    component=\"img\"\n\n                                    className={classes.cover}\n                                    image={item.photo}\n                                />\n                                <CardContent className={classes.content}>\n                                    <Typography component=\"h5\" variant=\"h5\">\n                                        {item.name}\n                                    </Typography>\n                                    {item.awardType.map(value => (\n                                        <Typography variant=\"h5\" color=\"textSecondary\">\n                                            {value}\n                                        </Typography>\n                                    ))}\n\n\n                                </CardContent>\n\n                            </div>\n                        </div>\n                    </Card>\n                ))\n            }\n        </Grid>\n    );\n}\n\nexport default GridComponent;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {GridList, isWidthUp} from '@material-ui/core'\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridComponent from \"./GridComponent\";\nfunction App() {\n\n  return (\n      <GridComponent></GridComponent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}